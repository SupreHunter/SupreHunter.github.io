<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MAC下搭建react-native开发环境]]></title>
    <url>%2F2018%2F01%2F09%2FMAC%E4%B8%8B%E6%90%AD%E5%BB%BAreact-native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[相信对于前端开发者而言react大家一点都不陌生，react-native也一定是有过一定了解的，这个技术让前端开发者可以用自己喜欢的语法和较低的学习成本，开发ios和android的原生应用，极为方便。 react-native是Facebook公司的产品，Learn Once，Write Anywhere，这也是 react-native官网 对其的概述，react-native开发基于JavaScript，这简直就是前端开发者的福音，而且Facebook还扩展出了一种可以在JaveScript代码中直接书写HTML标签的语法糖——JSX，而且论生态，react-native的社区也是非常活跃的。 废话不多说了，现在给大家简单说一下在MAC下搭建react-native开发环境的方法 开发ios环境配置首先附上官方文档 react-native搭建开发环境 安装Homebrew传送门：MAC下Homebrew的安装及简介 Node传送门：MAC下Node的安装及简介 安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。注意：不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别！ npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global Yarn、React Native的命令行工具（react-native-cli）Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。 npm install -g yarn react-native-cli 安装完yarn后同理也要设置镜像源： yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global 如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权： sudo chown -R `whoami` /usr/local 安装完yarn之后就可以用yarn代替npm了，例如用yarn代替npm install命令，用yarn add 某第三方库名代替npm install –save 某第三方库名。 XcodeReact Native目前需要Xcode 8.0 或更高版本。 虽然一般来说命令行工具都是默认安装了，但你最好还是启动Xcode，并在Xcode | Preferences | Locations菜单中检查一下是否装有某个版本的Command Line Tools。Xcode的命令行工具中也包含一些必须的工具，比如git等。 mac下ios的环境很好配置，至此我们就完成了。 开发android环境配置首先附上官方文档 react-native搭建开发环境 安装Homebrew传送门：MAC下Homebrew的安装及简介 Node传送门：MAC下Node的安装及简介 安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。注意：不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别！ npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global Yarn、React Native的命令行工具（react-native-cli）Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。 npm install -g yarn react-native-cli 安装完yarn后同理也要设置镜像源： yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global 如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权： sudo chown -R `whoami` /usr/local 安装完yarn之后就可以用yarn代替npm了，例如用yarn代替npm install命令，用yarn add 某第三方库名代替npm install –save 某第三方库名。 Android StudioReact Native目前需要Android Studio2.0或更高版本。Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。 Android Studio需要Java Development Kit [JDK] 1.8（暂不支持更高版本）。你可以在命令行中输入 javac -version来查看你当前安装的JDK版本。这里提供一个1.8版本的JDK下载链接： 链接:https://pan.baidu.com/s/1cptus2 密码:l89w 如果你的电脑之前安装了高版本的JDK，需要卸载高版本的，才能安装1.8，查询JDK版本，在命令行输入： javac -version 卸载JDK，在命令行输入： sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk（你的JDK版本） sudo rm -rf /Library/PreferencePanes/JavaControlPanel.prefPane sudo rm -rf /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin 由于担心稳定性，再提供一个Android Studio2.0版本的下载链接： 链接:https://pan.baidu.com/s/1eSxYEI2 密码:r7r2 每次进入Android Studio后都会提示更新程序，千万不要更新，不然会出现错误。想下载新版的Android Studio可以去官方下载，只是下好了就不要再更新就OK了，Android中文网。 下载好后就是安装了，除非特别注明，请不要改动安装过程中的选项。 安装过程中有一些需要改动的选项： 选择Custom选项，不要选择Standard 勾选Performance和Android Virtual Device 记住Android SDK Location，后面配置环境变量需要 安装完成后，在Android Studio的启动欢迎界面中选择Configure | SDK Manager。 在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Android SDK Platform 23、Intel x86 Atom System Image、Intel x86 Atom_64 System Image以及Google APIs Intel x86 Atom_64 System Image。 在SDK Tools窗口中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1（必须是这个版本）。然后还要勾选最底部的Android Support Repository. 然后点击OK，下载安装。 配置环境变量配置JAVA环境变量在命令行中输入： /usr/libexec/java_home 来定位java在mac中的安装路径，记住该路径，接着在命令行中输入： touch ~/.bash_profile （touch命令是若文件不存在，创建该文件），在命令行中输入： open ~/.bash_profile 用编辑器打开.bash_profile文件，复制以下内容到 .bash_profile文件中 export JAVA_HOME=查找到的java安装路径 export PATH=$JAVA_HOME/bin:$PATH export CLASS_PATH=$JAVA_HOME/lib:$CLASS_PATH 然后保存修改，在命令行中输入： source ~/.bash_profile 验证环境变量是否成功：在命令行输入： echo $JAVA_HOME 成功打印java的安装路径就说明配置成功了 配置Android环境变量在命令行中输入： open ~/.bash_profile 用编辑器打开.bash_profile文件，复制以下内容到 .bash_profile文件中 export ANDROID_HOME=之前安装Android Studio第三步的Android SDK路径 export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools 然后保存修改，在命令行中输入： source ~/.bash_profile 验证环境变量是否成功：在命令行输入： adb 验证android sdk环境变量是否设置成功 安装React Native在各种环境都安装完成后，就可以进入主题，安装react-native了，在命令行输入： npm install -g react-native-cli 安装完成后，输入： react-native -h 可以验证react-native是否安装成功，还有一些辅助软件，可以根据官方文档选择是否安装 初始化项目在命令行输入 react-native init myProject 即可初始化一个react-native项目，等待工程创建成功并安装好所有依赖以后，就可以使用一个你常用的编辑器打开myProject，来看一下react-native项目结构 运行项目ios项目在命令行输入： cd myProject react-native run-ios 即可运行ios项目 android项目首先打开Android Studio，在工具栏中找到AVD manager的图标，点击打开AVD管理器，创建一个模拟机型。 确认后可以在“Android virtual devices”中找到创建好的模拟器，启动模拟器，启动成功后，在命令行中输入 cd myProject react-native run-android 即可运行android项目 修改项目使用你喜欢的编辑器打开App.js并随便改上几行 在iOS模拟器中按下⌘+R就可以刷新APP并看到你的最新修改 在android模拟器中按下⌘+M，打开开发者菜单，然后选择 Reload JS 就可以看到你的最新修改。]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>react</tag>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC下NodeJS搭建express WEB服务器]]></title>
    <url>%2F2018%2F01%2F08%2FMAC%E4%B8%8BNodeJS%E6%90%AD%E5%BB%BAexpress%20WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Express 是一个简洁而灵活的 node.js Web应用框架,也是目前最火、使用率最高的框架，它提供了一系列强大特性帮助你创建各种Web应用。Express不对node.js已有的特性进行二次抽象，只是在它之上扩展了Web应用所需的功能。丰富的HTTP工具以及来自Connect框架的中间件随取随用，创建强健、友好的API变得快速又简单。 express中文官方网站，这个网站从安装到使用，再到中文API都有详细的教程，现在把简单基础的安装教程给他家展示一下。 express的安装首先你要安装node和npm，传送门：MAC搭建Node.js开发环境 假定你已经安装了 Node.js，接下来为你的应用创建一个目录myapp，然后进入此目录并将其作为当前工作目录。 cd myapp 通过 npm init 命令为你的应用创建一个 package.json 文件。 npm init 此命令将要求你输入几个参数，例如此应用的名称和版本。你可以直接按“回车”键接受默认设置即可，接下来安装 Express 并将其保存到依赖列表中： npm install express --save HelloWorld 实例接下来，我们一起创建一个基本的简单的 Express 应用。进入 myapp 目录，创建一个名为 app.js 的文件，然后将下列代码复制进去： let express = require(&apos;express&apos;); let app = express(); app.get(&apos;/&apos;, function (req, res) { res.send(&apos;Hello World!&apos;); }); let server = app.listen(3000, function () { let host = server.address().address; let port = server.address().port; console.log(&apos;Example app listening at http://%s:%s&apos;, host, port); }); 上面的代码启动一个服务并监听从 3000 端口进入的所有连接请求。他将对所有 (/) URL 或 路由 返回 “Hello World!” 字符串。对于其他所有路径全部返回 404 Not Found。 通过如下命令启动此应用： node app.js 然后在浏览器中打开 http://localhost:3000/ 并查看输出结果。 Express 应用生成器通过应用生成器工具 express 可以快速创建一个应用的骨架。 通过如下命令安装： npm install express-generator -g 在当前工作目录下创建一个命名为 myapp 的应用: express myapp 您会看到控制台输出如下信息： create : myapp create : myapp/package.json create : myapp/app.js create : myapp/public create : myapp/public/javascripts create : myapp/public/images create : myapp/routes create : myapp/routes/index.js create : myapp/routes/users.js create : myapp/public/stylesheets create : myapp/public/stylesheets/style.css create : myapp/views create : myapp/views/index.jade create : myapp/views/layout.jade create : myapp/views/error.jade create : myapp/bin create : myapp/bin/www 然后安装所有依赖包： cd myapp npm install 输入如下指令启动这个应用： npm start 然后在浏览器中打开 http://localhost:3000/ 网址就可以看到这个应用了。通过 Express 应用生成器创建的应用一般都有如下目录结构： . ├── app.js ├── bin │ └── www ├── package.json ├── public │ ├── images │ ├── javascripts │ └── stylesheets │ └── style.css ├── routes │ ├── index.js │ └── users.js └── views ├── error.jade ├── index.jade └── layout.jade 7 directories, 9 files 这样，一个基本的express框架就搭建完成了，关于路由和静态页面的相关信息，可以直接登陆中文官方网查阅。]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>node.js</tag>
        <tag>express</tag>
        <tag>web服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC搭建Node.js开发环境]]></title>
    <url>%2F2018%2F01%2F05%2FMAC%E6%90%AD%E5%BB%BANode.js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的包管理器 npm，是全球最大的开源库生态系统。 关于NodeJS便不再赘述，也有相关的中文文档，开发十分友好， NodeJS官方网站 您可以上官网自行学习。 NodeJS的下载安装去官网下载对应的版本即可，下载好后直接安装，Node自己继承了npm，安装好以后输入如下指令，便可以查看当前安装的版本： node -v npm -v npm是nodejs的包管理器，用于node插件管理，但是其服务器在国外，所以下载的速度可能会非常缓慢，推荐修改npm包管理器的registry为淘宝镜像，淘宝npm镜像 临时修改 npm --registry https://registry.npm.taobao.org install express 永久修改 npm config set registry https://registry.npm.taobao.org 通过cnpm下载 npm install -g cnpm --registry=https://registry.npm.taobao.org 编译调试NodeJS程序选择一款你喜欢的编辑器，就可以尝试便携第一个NodeJS程序了，本文推荐 VS Code ，这是一款不错的轻量级编辑器，根据个人的需求和喜好加载插件，提高编码效率，和sublime非常相像，个人比较喜欢他的UI风格，官网即可下载，VS Code官网下载，下载安装后，可以在侧边栏扩展处选择自己喜欢的插件，我就不再详细说了，可以在网上搜索一下。本人推荐一个关于VS Code自动保存的设置，还是十分方便的，直接贴上教程的传送门：-VS Code高效开发自动保存设置的方法 接下来可以新建一个名为“helloworld.js”的js文件，在里面写入一行喜闻乐见的代码： console.log(&quot;Hello World!&quot;); 保存到一个名为HelloWorld（当然可以起任意的名字）的文件夹里，接着打开终端，进入到刚才的文件夹的位置，输入： node helloworld.js 你将会看到终端内出现了 Hello World! 的字样，这样就成功编译并运行了你的第一个NodeJS代码。 当然前面推荐VS Code也又一个原因，就是它内置了调试NodeJS的环境，您可以直接打开js文件，写完代码后直接点击调试，就会在控制台界面看到相应的输出。]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC下Git的安装及配置]]></title>
    <url>%2F2018%2F01%2F05%2FMAC%E4%B8%8BGit%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。 Git官网 安装Git最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。 方法一：可以去官网下载对应系统的版本，Git官网下载 方法二：通过homebrew指令下载，不过首先需要安装homebrew，传送门：MAC下Homebrew的安装及简介，安装完成后用下列指令安装Git： brew install git 方法三：简单许多，在MAC下只要安装了XCode，就会自动集成Git，不过没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。 安装完成后，可以运行指令查看Git的版本： git --version 可以看到如下结果： git version 2.14.3 (Apple Git-98) 配置Git的用户名和邮箱当安装好Git后，我们需要一个Github的用户名和邮箱，注册的事就不再赘述了。Github官网，注册好后，记住你的用户名和邮箱，输入如下指令： git config --global user.name &quot;your_name&quot; git config --global user.email &quot;your_email&quot; 配置信息可以更改，想要更改的话就再输入上面的指令就可以了，如果想查询当前的配置信息，可以输入如下指令： git config --list Git默认是大小写不敏感的，也就是说，将一个文件名某个字母做了大小写转换的修改Git是忽略这个改动的，导致在同步代码时候会出现错误，所以建议大小把Git设置成大小写敏感。输入如下代码即可： git config core.ignorecase false 使用GitHub Desktop来将项目托管到GitHub在MAC上我们可以很方便地通过GitHub Desktop来操作github，首先登陆官网下载安装 GitHub Desktop官网，安装完成后就需要配置一下GitHub Desktop，网上的相关教程很多，我现在给大家贴一个不错的传送门 在MAC中使用Github超详细攻略，里面还有相关github的注册攻略，大家可以参照这个攻略，就可以完成在MAC下操作github来实现软件分布式版本管理了。]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC下配置apache、php、mysql开发环境]]></title>
    <url>%2F2017%2F12%2F25%2FMAC%E4%B8%8B%E9%85%8D%E7%BD%AEapache%E3%80%81php%E3%80%81mysql%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;MAC系统对于开发者来说一直都是一个非常友好的环境，搭建php的环境更是方便快捷，只需很简单的配置便可以开始使用。 Apache在MAC系统中已经安装好了Apache服务，输入如下命令可以查看当前MAC的版本： apachectl -v 可以看到如下版本信息： Server version: Apache/2.4.28 (Unix) Server built: Oct 9 2017 19:54:20 启动、停止、重启apache： sudo apachectl start sudu apachectl stop sudo apachectl restart 需要输入当前MAC的密码，如果启动apache后，可以在浏览器输入如下网址： http://localhost http://127.0.0.1 如果页面显示 It works! ，祝贺你，apache已经启动成功了。apache默认安装的一个隐藏目录中，你可以在控制台输入 open /etc 找到apache的目录，也可以在Finder -&gt; 前往 -&gt; 前往文件夹中输入/etc即可，找到apache文件夹。在里面有很多的配置文件，例如 httpd.conf 等，修改这些文件，可以改变很多apache的配置，包括默认的部署路径等，但本人建议不要修改（搞了很久还是出错），如果怕每次打开默认路径麻烦，我会给你一个applescript脚本文件，直接可以打开目录。如果你还是想修改，可以借鉴一下其他人的方法，但你一定要备份原来的 httpd.conf ，不然…你懂的，我现在把一个原版2.4.28的httpd.conf下载链接给你们，以防万一啊。 链接:https://pan.baidu.com/s/1o8Jwxjc 密码:o9ti 那么刚才那个 It works! 的页面放在哪里呢，在apache的默认部署路径里： /Library/WebServer/Documents/ 你也可以通过上述两个方法进入该目录，我们以后的项目也就可以放在这个路径下了，下面我提供一个快速打开这个文件夹的脚本文件： 链接:https://pan.baidu.com/s/1geShWcz 密码:9sl6 至此，apache服务器就好了，是不是很简单啊 PHPphp也是MAC系统自带的，这给我们省去了很多麻烦，直接输入命令： php -v 可以看到当前php的版本： PHP 7.1.7 (cli) (built: Jul 15 2017 18:08:09) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies 首先，找到上文提到的apache安装目录下的 httpd.conf ，找到 #LoadModule php7_module libexec/apache2/libphp7.so 将最开头的#删除，保存配置。（如果因为权限无法保存，就拖到桌面，保存完在拖回文件夹覆盖），最后我们在部署文件夹（/Library/WebServer/Documents/）内新建一个info.php的文件，输入 &lt;?php phpinfo(); ?&gt; 保存后，重启apache服务器，在浏览器里输入： http://localhost/info.php 如果能看到页面上显示的PHP信息就说明OK了！ MySqlMAC下Mysql是需要安装的，安装的方法很多，建议直接去官网 http://dev.mysql.com/downloads/mysql/ 下载，找到自己电脑相对应的版本，下载并安装。（会弹出一个对话框，上面有初始密码，请记住，方便后面更改，因为这个初始密码很难记住）输入如下命令： mysql --version 可以看到当前mysql的版本信息： mysql Ver 14.14 Distrib 5.7.20, for macos10.12 (x86_64) using EditLine wrapper 如果提示command not found,这是因为该命令默认访问/usr/local/bin/mysql路径下的mysql,所以我们可以在终端输入如下命令： sudo ln -fs /usr/local/mysql/bin/mysql /usr/local/bin/mysql 接着,使用安装MySQL时给出的用户和密码登录MySQL服务,在终端中输入如下命令，键入回车后输入mysql密码： mysql -u root -p 接着进入到了mysql的命令行，键入命令退出mysql服务。 exit 最后，在终端中更改mysql密码： /usr/local/mysql/bin/mysqladmin -u root -p password 新密码 注：root为默认用户，将新密码改成自己的密码后，键入回车输入原密码即可。回报一个warring，没关系，直接忽视。 在命令行输入如下指令,启动与停止MySQL服务： sudo /usr/local/mysql/support-files/mysql.server start sudo /usr/local/mysql/support-files/mysql.server stop 也可以在系统偏好设置中点击MySql来启动和停止mysql服务。 MySQL可视化管理mysql在MAC下有很多可视化管理软件，在这里，我推荐使用phpMyAdmin，首先去官网下载： https://www.phpmyadmin.net/downloads/ 下载后，将文件解压到apache的默认部署路径（/Library/WebServer/Documents/）下，并改名为 phpMyAdmin ，将文件夹中的 config.sample.inc.php 文件重命名为 config.inc.php，打开文件，修改代码： // 修改前: $cfg[&apos;Servers&apos;][$i][&apos;host&apos;] = &apos;localhost&apos;; // 修改后: $cfg[&apos;Servers&apos;][$i][&apos;host&apos;] = &apos;127.0.0.1&apos;; 最后,在浏览器中输入如下网址进行登录即可直接对MySQL进行可视化管理： http://localhost/phpmyadmin/ 注：用户为 root ，密码为修改后的密码。 至此，php的初步开发环境就搭建成功了，祝你在php的道路上越走越远！]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>apache</tag>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC下Homebrew的安装及简介]]></title>
    <url>%2F2017%2F12%2F25%2FMAC%E4%B8%8BHomebrew%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;什么是Homebrew呢？官方给出了非常清楚的解释：Homebrew是一个包管理器，用于在Mac上安装一些OS X没有的UNIX工具（比如著名的wget）。 &emsp;&emsp;Homebrew将这些工具统统安装到了 /usr/local/Cellar 目录中，并在 /usr/local/bin 中创建符号链接。 Homebrew的官方网站http://mxcl.github.com/homebrew/ Homebrew的安装Homebrew是基于Ruby的，所以安装过程也是很简单的，只要你的电脑安装了Xcode，就会自带Ruby，把下面的代码粘贴到Terminal中执行即可。 /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 接着按“Enter”，输入密码，稍等片刻即将安装好Homebrew，安装成功后，会自动创建目录 /usr/local/Cellar 来存放Homebrew安装的程序。 这时你就可以直接在命令行状态下面使用 brew 命令了。 通过 brew install就可以安装软件了,通过 brew search 就可以搜索程序，例如 brew search vim ,就可以搜索名称包括vim的程序, 通过 brew update 就可以把包信息更新到最新，不过包更新是通过Git命令，所以要先通过 brew install git 命令安装git。 brew install git Homebrew的一些命令//查看brew的帮助 brew –help //安装软件 brew install git //卸载软件 brew uninstall git //搜索软件 brew search git //显示已经安装软件列表 brew list //更新软件，把所有的Formula目录更新，并且会对本机已经安装并有更新的软件用*标明。 brew update //更新某具体软件 brew upgrade git //查看软件信息 brew [info | home] [FORMULA...] //删除程序，和upgrade一样，单个软件删除和所有程序老版删除。 brew cleanup git brew cleanup //查看那些已安装的程序需要更新 brew outdated //其它Homebrew指令: brew list //—列出已安装的软件 brew update //—更新Homebrew brew home * //—用浏览器打开 brew info * //—显示软件内容信息 brew deps * //—显示包依赖 brew server * //—启动web服务器，可以通过浏览器访问 //http://localhost:4567/ 来同网页来管理包 brew -h brew //—帮助]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时光流逝，不知何时]]></title>
    <url>%2F2017%2F11%2F20%2F%E6%97%B6%E5%85%89%E6%B5%81%E9%80%9D%EF%BC%8C%E4%B8%8D%E7%9F%A5%E4%BD%95%E6%97%B6%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;人生到了这个尴尬的路口，喜闻乐见地开始了多愁善感，即入而立之年，可是状态和心态却完全没有跟上时光的荏苒…工作再一次从“实习生”起步，感觉处处相难，依旧没有多么澎湃的信心，把自己慢慢跌入中年危机的深潭。 &emsp;&emsp;恐怕心已不再年轻,让我对梦想的渴望止步于此，感觉只有生活的压力和对现状的不满催动着我为之最后一搏！ &emsp;&emsp;兜兜转转，回归如初，身边多了一个如此疼爱的人，不枉之前的蹉跎，拾之我运。亦不能负如此温情的寄托，实属我命。只有在这个充满了不解的社会里继续辗转，尽量坚持我所坚持的一切，希望我身边的人能依旧天真、幸福。]]></content>
      <categories>
        <category>随笔散文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
